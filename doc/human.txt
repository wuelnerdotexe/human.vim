*human.txt* Collection of vim default options for humans

To use this plugin you just have to install it, and you will start to notice
small changes in Vim that will make more sense.

=============================================================================

1. Options                                                    *human-options*

To see the many options contained in this plugin, look directly at the source
code in the `plugin/human.vim` directory, where all the options are nicely
organized.

If you need to change the value of an option contained in this plugin, you
must do so after loading the plugin; for which you will need to create an
automatic command `autocmd VimEnter * set {option}` in your `VIMRC` file, or
normally rewrite `set {option}` your options to a file in the
`after /plugin/` directory.

Warning: Otherwise, your options value will be changed to Vim for Humans.

If you need to change the value of an option contained in this plugin, you
must do so after loading the plugin in your `VIMRC` file or in a separate
file in the `after/plugin/` folder, if you do it before, your options will
be rewritten. Learn about the options in the `plugin/human.vim` source code.

=============================================================================

2. Mappings                                                  *human-mappings*

Vim for Humans creates key mappings to navigate between buffers, following
the same Vim philosophy for navigating between tabs.

In addition, a key mapping `CTRL + L` in normal mode is also included to hide
the highlight as a result of having the `hlsearch` option enabled when
performing a search. This mapping is created only for Vim, because in Neovim
it is already included by default.

The "smart" mappings for buffers are:

2.1. Normal mode

- Use `gB` for previous buffer.
- Use `gb` for next buffer.

2.2. Insert and visual mode

- Use `Shift + Page Down` for previous buffer.
- Use `Shift + Page Up` for next buffer.

=============================================================================

3. Plugins                                                    *human-plugins*

It also includes minimalistic and modernized plugins with on-demand functions
to further enhance the human experience.

The plugins included are:

3.1. BufOnly

BufOnly allows you to clear all buffers except the one you are in. This is an
oddly useful feature that Vim provides for tabs and windows, but not for
buffers.

BufOnly has only one command:

`BufOnly`

Which you can map to your favorite map, for example:

`nmap 1b <Plug>(BufOnly)`


In addition, BufOnly allows to exclude buffers by buftypes and filetypes, so
as not to delete those that are not files, for example:

`" Exclude buftypes for BufOnly command.`
`let g:bufonly_exclude_buftypes = [ 'terminal' ]`

`" Exclude filetypes for BufOnly command.`
`let g:bufonly_exclude_filetypes = [ 'aerial', 'fern' ]`

3.2. Maximizer

Maximizer allows you to maximize and restore the size of the current window
you are in.

The command for Maximizer is:

`MaximizerToggle`

Which you can map to your favorite map, for example:

`nmap <C-w>m <Plug>(MaximizerToggle)`

3.3. Resizer

Resizer allows you to resize the current split window, but in a visually more
logical way, because the direction in which you resize is respected, as
opposed to Vim's very gimmicky native mappings.

The Resizer commands are:

`ResizerLeft`
`ResizerDown`
`ResizerUp`
`ResizerRight`

Which you can map to your favorite map, for example:

`nmap <A-h> <Plug>(ResizerLeft)`
`nmap <A-j> <Plug>(ResizerDown)`
`nmap <A-k> <Plug>(ResizerUp)`
`nmap <A-l> <Plug>(ResizerRight)`

vim:textwidth=78:tabstop=8:filetype=help:
